defmodule Smith.Repo.Migrations.CreateMemoryOsResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:memory_system_memories, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :content, :text, null: false
      add :embedding, {:array, :float}
      add :source_agent_id, :uuid
      add :importance_score, :float, default: 0.0
      add :creation_timestamp, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')")

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :full_text_vector, :vector, size: 3072
    end

    create table(:memory_stm_dialogue_pages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :query, :text
      add :response, :text
      add :timestamp, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')")
      add :meta_chain, :text
      add :agent_id, :uuid, null: false
      add :dialogue_segment_id, :uuid

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:memory_mtm_dialogue_segments, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :topic_summary, :text
      add :embedding, {:array, :float}
      add :keywords, {:array, :text}, default: []
      add :heat_score, :float, default: 0.0
      add :visit_count, :bigint, default: 0
      add :last_accessed, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')")
      add :agent_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :full_text_vector, :vector, size: 3072
    end

    create table(:memory_lpm_trait_entries, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :value, :text, null: false
      add :confidence, :float, default: 1.0
      add :created_at, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')")
      add :object_persona_id, :uuid
      add :agent_persona_id, :uuid

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:memory_lpm_object_personas, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:memory_lpm_trait_entries) do
      modify :object_persona_id,
             references(:memory_lpm_object_personas,
               column: :id,
               name: "memory_lpm_trait_entries_object_persona_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:memory_lpm_object_personas) do
      add :type, :text, null: false
      add :identifier, :text, null: false
      add :profile, :map, default: %{}
      add :agent_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:memory_lpm_object_personas, [:agent_id, :type, :identifier],
             name: "memory_lpm_object_personas_unique_per_agent_index"
           )

    create table(:memory_lpm_knowledge_base_entries, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :fact, :text, null: false
      add :confidence, :float, default: 1.0
      add :created_at, :utc_datetime, default: fragment("(now() AT TIME ZONE 'utc')")

      add :object_persona_id,
          references(:memory_lpm_object_personas,
            column: :id,
            name: "memory_lpm_knowledge_base_entries_object_persona_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:memory_lpm_agent_personas, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:memory_lpm_trait_entries) do
      modify :agent_persona_id,
             references(:memory_lpm_agent_personas,
               column: :id,
               name: "memory_lpm_trait_entries_agent_persona_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:memory_lpm_trait_entries, [:object_persona_id, :agent_persona_id],
             name: "memory_lpm_trait_entries_exclusive_persona_index"
           )

    alter table(:memory_lpm_agent_personas) do
      add :profile, :map, default: %{}
      add :agent_id, :uuid, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:memory_lpm_agent_personas, [:agent_id],
             name: "memory_lpm_agent_personas_unique_agent_index"
           )

    create table(:memory_configurations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :agent_id, :uuid, null: false
      add :agent_type, :text, default: "default"
      add :stm_capacity, :bigint, default: 7
      add :mtm_capacity, :bigint, default: 200
      add :mtm_fscore_threshold, :float, default: 0.6
      add :heat_alpha, :float, default: 1.0
      add :heat_beta, :float, default: 0.5
      add :heat_gamma, :float, default: 2.0
      add :heat_threshold, :float, default: 5.0
      add :object_kb_capacity, :bigint, default: 100
      add :object_traits_capacity, :bigint, default: 50
      add :agent_traits_capacity, :bigint, default: 30
      add :system_memory_importance_threshold, :float, default: 0.8

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:memory_configurations, [:agent_id],
             name: "memory_configurations_unique_agent_config_index"
           )
  end

  def down do
    drop_if_exists unique_index(:memory_configurations, [:agent_id],
                     name: "memory_configurations_unique_agent_config_index"
                   )

    drop table(:memory_configurations)

    drop_if_exists unique_index(:memory_lpm_agent_personas, [:agent_id],
                     name: "memory_lpm_agent_personas_unique_agent_index"
                   )

    alter table(:memory_lpm_agent_personas) do
      remove :updated_at
      remove :inserted_at
      remove :agent_id
      remove :profile
    end

    drop_if_exists unique_index(
                     :memory_lpm_trait_entries,
                     [:object_persona_id, :agent_persona_id],
                     name: "memory_lpm_trait_entries_exclusive_persona_index"
                   )

    drop constraint(:memory_lpm_trait_entries, "memory_lpm_trait_entries_agent_persona_id_fkey")

    alter table(:memory_lpm_trait_entries) do
      modify :agent_persona_id, :uuid
    end

    drop table(:memory_lpm_agent_personas)

    drop constraint(
           :memory_lpm_knowledge_base_entries,
           "memory_lpm_knowledge_base_entries_object_persona_id_fkey"
         )

    drop table(:memory_lpm_knowledge_base_entries)

    drop_if_exists unique_index(:memory_lpm_object_personas, [:agent_id, :type, :identifier],
                     name: "memory_lpm_object_personas_unique_per_agent_index"
                   )

    alter table(:memory_lpm_object_personas) do
      remove :updated_at
      remove :inserted_at
      remove :agent_id
      remove :profile
      remove :identifier
      remove :type
    end

    drop constraint(:memory_lpm_trait_entries, "memory_lpm_trait_entries_object_persona_id_fkey")

    alter table(:memory_lpm_trait_entries) do
      modify :object_persona_id, :uuid
    end

    drop table(:memory_lpm_object_personas)

    drop table(:memory_lpm_trait_entries)

    drop table(:memory_mtm_dialogue_segments)

    drop table(:memory_stm_dialogue_pages)

    drop table(:memory_system_memories)
  end
end
